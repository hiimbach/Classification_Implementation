import os 

from torch.utils.data import Dataset
from PIL import Image, ImageFile
from sklearn.model_selection import train_test_split

# Avoid image truncates
ImageFile.LOAD_TRUNCATED_IMAGES = True

def data_split(dir, split_ratio=0.8):
    '''
    Used to split data to train_data, split_data and a list of class_names
    
    Parameters:
        dir: data directory, format as:
            0/a.jpg
            1/b.jpg
            ...
        batch_size (int)
        split_ratio: the ratio of train_data/all_data
    
    Return:
        train_data (dict): {'img_path': [], 'label': []}
        val_data (dict): {'img_path': [], 'label': []}
        class_names (list)
    '''
    
    # This variable is used to store all data read
    data = {}
    class_names = []
    class_idx = -1
    
    # First we read all data from the dir
    # Each folder represents for a class
    for folder in os.listdir(dir):
        folder_path = os.path.join(dir, folder)
        class_names.append(folder)
        class_idx += 1
        
        data[folder] = {'img_path': [], 'label': []}
        data_folder = data[folder]
        
        for item in os.listdir(folder_path):
            img_path = os.path.join(folder_path, item)

            # In each folder in the data dictionary, we append img and corresponding label in 2 list
            data_folder['img_path'].append(img_path)
            data_folder['label'].append(class_idx)
            
    # Now we create train dict and val dict to split data
    train_data = {'img_path': [], 'label': []}
    val_data = {'img_path': [], 'label': []}

    # Split data to train and val
    for folder in data:
        data_folder = data[folder]
        
        # Choose img and corresponding label randomly
        idx = range(len(data_folder['label']))
        train_idx, test_idx = train_test_split(idx, test_size=(1-split_ratio))
        for i in train_idx:
            train_data['img_path'].append(data_folder['img_path'][i])
            train_data['label'].append(data_folder['label'][i])
            
        for i in test_idx:
            val_data['img_path'].append(data_folder['img_path'][i])
            val_data['label'].append(data_folder['label'][i])
    
    return train_data, val_data, class_names

class CustomDataset(Dataset):
    def __init__(self, data, transform=None):
        '''
        Custom torch.utils.data.Dataset from data generated by fn data_split above
        
        Arguments:
            data (dict): {'img_path': [], 'label': []}
            transform: torchvision.transforms
        '''
        self.data = data
        self.transform = transform
        
    def __getitem__(self, idx):
        try:
            label = self.data['label'][idx]
            image = Image.open(self.data['img_path'][idx]).convert("RGB")
            if self.transform is not None:
                image = self.transform(image)
            return image, label
        except:
            image = Image.open('data/mushrooms/Agaricus/000_ePQknW8cTp8.jpg').convert("RGB")
            label = 0
            if self.transform is not None:
                image = self.transform(image)
            return image, label
        
    def __len__(self):
        return len(self.data['label'])
    

